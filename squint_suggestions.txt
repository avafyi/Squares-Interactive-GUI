/*
	
Add a generateFloor method that has parameters srow scol and erow ecol. It will generate rectangular sections of flooring 
so if the user wants a horizontal line of flooring of length 5 on row 4 then theynwould pass in 5 1 5 5 as it generates inclusively
	

This could also have a randomness variable that determines how many not the floorboards are different from the standard clean 
triple floor board horizontal line style floorboards. If this randomness is 0 then all clean. If it is between 1 and 3 
inclusive then it does variations of the different clean boards. If between 4 and 10 then varying of the weird boards placed in randomly.
	

Also make an add shading method that goes ras params of trans1 trans2 and trans3 for the three opacity (alpha) values of the tri level 
shadowing also param of light source location (i.e. upper left in the current implementation) to determine where shading should be generated.  
It will then look for certain objects like walls and see if (in the current s) there is a floor to the right of the wall. 
If so, it will add a shade image to the layer above the floor image at that coordinate and the shade images will be determined by the 
type of image casting the shadow like normal wall or corner walk etc 
	

Another thing is to have the layer priority list where the lower the priority, the lower the layer is that it gets put. 
So in the current instance with 4 layers, the transparent image is the lowest priority because it goes down first and other 
objects oget drawn over it by being placed on a higher layer.  Thus the walls have a higher priority than floors because 
the walls need to be drawn over floors. Though in cases like the vertical walls, the priority may want to be equal to the 
floorboards assuming they dont simulate being over the floor.
	

For the moving window thing where the player has a field of view and when they move around the map the window follows the 
user by keeping them centered in the application window ... What to do is keep the array for the map in storage but do not 
make it a static background yet. Make an entire map 2d row col array of transparent images so that everything appears to 
be black and this will be the static background so that it does not get redrawn every call to repaint. Then draw say a 5x5 
square with the user at the center. If the user moves left, you remove the right col of images from your logical view 
window array and then go to the original created map array with all the layers and get the col that is tonbthe left of the 
current furthest left col from the view window. Then shift the entire view window array soi that the col you just got is the 
new far left and everything else SATs the same in the array hut is shifted to the right by one column.

Make sure that map generation can happen semi-dynamically for varying window sizes. Include an option for default map location 
so that the user specified map (i.e. everything that isn't a transparent.png) can be positioned at different places in the window
like centered, or top center, or top left, or top right, or right centered or bottom right or bottom centered or bottom left
or left centered. This way if the size of the map gets expanded but the actual images are not changed, it will fill in transparent
images in the extra space that has not been specified based on location. Like if it is centered, pad the top rows, bottom rows, left 
columns, and right columns evenly s.t. num_top_rows_padded = num_bot_rows_padded and num_left_cols_padded = num_right_cols_padded
With this implemented, when the player camera gets implemented it will be easy to pad "darkness" i.e. un-rendered map areas around
all sides of the map. For an outside scenario, this padding could be cliffs or fences with grass beyond the fences. This would
be quite a bit more complex as the "out-of-bounds" area will have to have fencing with a grass layer beneath it before padding
grass or pavemenet or whatever beyond the fenceline. Also be sure to make this special out-of-bounds area SOLID so that if AI
mode is still kept in use, they will not be spawned out of bounds.

*/


	
	// Map 
	public static final int IN = 0;		// a level
	public static final int OUT = 1;	// a level
	public int LEVEL = -1;
	public static final int MAP_LAYERS = 4;	// max number of images needed in a layer
	
	// Textures
	public static final String LEFT_WALL = "in_walls/12.png";
	public static final String RIGHT_WALL = "in_walls/13.png";
	public static final String TOP_WALL = "in_walls/1.png";
	public static final String BOTTOM_WALL = "in_walls/18.png";
	public static final String FLOOR_1 = "in_floor/1.png";
	public static final String FLOOR_2 = "in_floor/2.png";
	public static final String FLOOR_3 = "in_floor/3.png";
	public static final String FLOOR_4 = "in_floor/4.png";
	public static final String FLOOR_5 = "in_floor/5.png";
	
	// Wall orientations
	public static enum WallOrientation { LEFT, RIGHT, TOP, BOTTOM };
	public static enum Corner { Q1, Q2, Q3, Q4 };	// The quadrant (2d plane) of the "empty" portion of the wall
	
	/**
	 * 
	 * @param row			The logical starting row coordinate on the level (map)
	 * @param col			The logical starting col coordinate on the level (map)
	 * @param orientation	Which wall type, also used to check start, end coordinates
	 * @param len			The length of the wall, if the Corners are not null, they are included in the total len
	 * @param layer			The map layer to place the wall
	 * @param lCorner		The corner on the left/top part of the wall (If null, no corner added)
	 * @param rCorner		The corner on the right/bottom part of the wall (If null, no corner added)
	 */
	private void generateWall(int row, int col, WallOrientation orientation, int len, int layer, Corner lCorner, Corner rCorner) {
		switch (orientation) {
			case LEFT:				
				break;
			case RIGHT:
				break;
			case TOP:
				break;
			case BOTTOM:
				break;
			default:
				// Not a valid orientation
				break;
		}
	}
	
	// generateLevel(MAP_LAYERS, NUM_SQUARES_DOWN, NUM_SQUARES_ACROSS);
	private void generateLevel(int layers, int down, int across) {		
		String[][][] mapImages = new String[layers][down][across];
		String dir = null;
		if (LEVEL == IN) {
			dir = "in/";
		} else if (LEVEL == OUT) {
			dir = "out/";
		}
		
		// Need to make sure that SOLIDS includes "trans"
		// Also need to modify the solids checking mapSquare generator
		//	Have to ignore a SOLID layer if there is a NON-SOLID layer on top of it 
		//	Like if mapImages[1][0][0] is "in_floor/4.png" but mapImages[0][0][0] will have "transparent.png"
		// Also need to modify image resource file system to have two seperate folders, in and out with subdivisions like wall, floor, fence, pave
		// Create a transparent layer so that any area not textured will block movement
		for (int row = 0; row < down; row++) {
			for (int col = 0; col < across; col++) {	
				mapImages[0][row][col] = "transparent.png";
			}
		}	
	}
